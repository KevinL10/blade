from utils.llm import Client
from utils.enums import COLOR
import subprocess


class Exploitation:
    """
    Develops working exploit scripts for a given vulnerability
    """

    def __init__(self, constants_code: str, source_code: str):
        self.constants_code = constants_code
        self.source_code = source_code
        self.client = Client()

    def exploit(self, vulnerability: str) -> str:
        """
        Returns the flag from a succesful exploit. Continually
        re-develop the exploit until a flag is found, or the vulnerability
        is determined to be irrelevant.
        """
        response = self.client.complete(
            f"""You are provided with the source code related to an RSA cryptography problem, enclosed within the triple backticks below. Given the following vulnerability description, please write a SageMath exploit in Python 3 syntax to recover the unknown FLAG variable

IMPORTANT:
- Implement only a SageMath function solve() that takes in the constant variables as parameters and returns the value of the recovered flag
- Do not call this solve() function in your SageMath script
- The solve() function should contain all constants as parameters, even if their values are not directly used 
- Do not brute force the solution. Your script must be practically feasible.
         
Description: {vulnerability}

```
{self.source_code}                 
```              
"""
        )

        print(f"{COLOR.GREEN}[x] Response: {COLOR.RESET}")
        print(response)

        script = response.split("```")[1].split("```")[0].strip()

        if any(
            [
                script.startswith(prefix)
                for prefix in ["python", "sage", "Python", "Sage"]
            ]
        ):
            script = script[script.find("\n") + 1 :]

        # replace constant values
        constant_vars = {}
        exec(self.constants_code, {}, constant_vars)

        for var_name, var_value in constant_vars.items():
            script = script.replace('"{' + var_name + '}"', str(var_value))
            script = script.replace("'{" + var_name + "}'", str(var_value))
            script = script.replace("{" + var_name + "}", str(var_value))

        constant_args = ", ".join([f"{k}={v}" for k, v in constant_vars.items()])
        script = f"""
from Crypto.Util.number import *

{script}

print(solve({constant_args}))
"""
        print(f"{COLOR.GREEN}[x] Generated script: {COLOR.RESET}")
        print(script)
        print()

        # save and execute
        with open("/tmp/exploit.sage", "w") as f:
            f.write(script.strip())

        result = subprocess.run(["sage", "/tmp/exploit.sage"], capture_output=True)
        print(
            f"{COLOR.GREEN}[x] Script execution sterr: {COLOR.RESET}",
            result.stderr.decode(),
        )
        print(
            f"{COLOR.GREEN}[x] Script execution stdout: {COLOR.RESET}",
            result.stdout.decode(),
        )
        return result.stdout.decode().strip()
